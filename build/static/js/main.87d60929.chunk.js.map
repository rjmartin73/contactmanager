{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","name","email","phone","dispatch","setState","inherits","createClass","key","value","react_default","a","createElement","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","_this2","_this$props$contact","className","onClick","style","cursor","float","color","bind","Contacts","Fragment","map","contacts_Contact","d","Date","$day","$d","getDate","padDate","$time","toLocaleTimeString","getMonth","getFullYear","Header","branding","href","defaultProps","TextInputGroup","_ref","label","placeholder","onChange","htmlFor","propType","PropTypes","string","isRequired","func","AddContact","onSubmit","preventDefault","_this$state","uuid","defineProperty","target","_this$state2","layout_TextInputGroup","App","context_Provider","layout_Header","contacts_AddContact","contacts_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87d60929.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'DELETE_CONTACT':\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payload\r\n        )\r\n      };\r\n    case 'ADD_CONTACT':\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        id: 1,\r\n        name: 'John Doe',\r\n        email: 'jdoe@gmail.com',\r\n        phone: '555-555-5555'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Karen Smith',\r\n        email: 'ksmith@gmail.com',\r\n        phone: '555-555-5858'\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'henry Johnson',\r\n        email: 'henry@gmail.com',\r\n        phone: '555-555-1688'\r\n      }\r\n    ],\r\n    dispatch: action => {\r\n      this.setState(state => reducer(state, action));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    showContactInfo: false\r\n  };\r\n\r\n  /// Has access to 'this' if this function is an arrow function,\r\n  /// otherwise you have to bind this to the event onClick={this.onShowClick.bind(this)}\r\n  /// or use a constructor to bind it\r\n  onShowClick = e => {\r\n    this.setState({ showContactInfo: !this.state.showContactInfo });\r\n  };\r\n\r\n  // delete handler\r\n  onDeleteClick = (id, dispatch) => {\r\n    //console.error('It works!');\r\n    dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n  };\r\n  render() {\r\n    const { name, email, phone, id } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className='card card-body mb-3'>\r\n              <h4>\r\n                {name}{' '}\r\n                <i\r\n                  onClick={this.onShowClick}\r\n                  className='fas fa-sort-down'\r\n                  style={{ cursor: 'pointer' }}\r\n                />\r\n                <i\r\n                  className='fas fa-times'\r\n                  style={{ cursor: 'pointer', float: 'right', color: 'red' }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                />\r\n              </h4>\r\n              {showContactInfo ? (\r\n                <ul className='list-group'>\r\n                  <li className='list-group-item'>Email: {email}</li>\r\n                  <li className='list-group-item'>Phone: {phone}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired\r\n  //   email: PropTypes.string.isRequired,\r\n  //   phone: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              {contacts.map(contact => (\r\n                <Contact\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                  // email={contact.email}\r\n                  // phone={contact.phone}\r\n                />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n/// Date stuff\r\nconst d = new Date();\r\nconst $months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\nconst $day = padDate(d); //d.getDate() < 10 ? '0' + d.getDate() : d.getDate(); // add leading zero\r\nconst $time = d.toLocaleTimeString();\r\nconst _month = $months[d.getMonth()];\r\nconst _day = $day;\r\nconst $d = _month + ' ' + _day + ', ' + d.getFullYear() + ' - ' + $time;\r\n/// End of date stuff\r\n\r\nconst Header = props => {\r\n  //d = d.toDateString;\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      {/* <h1 style={headingStyle}>{branding}</h1> */}\r\n      <nav className='navbar navbar-expand-sm navbar-dark bg-primary mb-3 mt-3 py-0'>\r\n        <div className='container'>\r\n          <div>\r\n            <ul className='navbar-nav'>\r\n              <li className='nav-item text-white-50'>{$d}</li>\r\n            </ul>\r\n          </div>\r\n          <a href='/' className='navbar-brand ml-auto'>\r\n            {branding}\r\n          </a>\r\n          <div>\r\n            <ul className='navbar-nav mr-auto'>\r\n              <li className='nav-item'>\r\n                <a href='/' className='nav-link'>\r\n                  Home\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: 'Contact Manger'\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\n\r\n// const headingStyle = {\r\n//   color: '#bada55',\r\n//   fontSize: '50px'\r\n// };\r\n\r\n/// Helper functions\r\nfunction padDate($d) {\r\n  return $d.getDate() < 10 ? '0' + $d.getDate() : $d.getDate();\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange\r\n}) => {\r\n  return (\r\n    <div className='form-group'>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        className='form-control form-control-lg'\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputGroup.propType = {\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\nTextInputGroup.defaultProps = {\r\n  type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport uuid from 'uuid';\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: ''\r\n  };\r\n\r\n  onSubmit = (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state; //destructuring\r\n\r\n    // new contact object\r\n    const newContact = {\r\n      id: uuid(),\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n    dispatch({ type: 'ADD_CONTACT', payload: newContact });\r\n\r\n    //clear the state\r\n    this.setState({ name: '', email: '', phone: '' });\r\n  };\r\n\r\n  onChange = e =>\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n\r\n  render() {\r\n    const { name, email, phone } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className='card mb-3'>\r\n              <div className='card-header bg-primary text-white'>\r\n                Add Contact\r\n              </div>\r\n              <div>\r\n                <div className='card-body'>\r\n                  <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup\r\n                      label='Names'\r\n                      name='name'\r\n                      placeholder='Enter Name...'\r\n                      value={name}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    <TextInputGroup\r\n                      label='Emails'\r\n                      name='email'\r\n                      placeholder='Enter Email...'\r\n                      type='email'\r\n                      value={email}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    <TextInputGroup\r\n                      label='Phone'\r\n                      name='phone'\r\n                      placeholder='Enter Phone Number...'\r\n                      value={phone}\r\n                      onChange={this.onChange}\r\n                    />\r\n                    <button\r\n                      type='submit'\r\n                      className='btn btn-outline-primary my-2 my-sm-0 btn-primary'\r\n                    >\r\n                      Add Contact\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from 'react';\r\n\r\n/// Bring in custom components\r\nimport Contacts from './components/contacts/Contacts';\r\nimport Header from './components/layout/Header';\r\nimport AddContact from './components/contacts/AddContact';\r\n\r\nimport { Provider } from './context';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider>\r\n        <div className='App'>\r\n          <Header branding='My Contact Manager' />\r\n          <div className='container'>\r\n            <AddContact />\r\n            <Contacts />\r\n          </div>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}